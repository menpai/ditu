{"version":3,"sources":["map.csv","App.js","serviceWorker.js","index.js"],"names":["module","exports","highchartsMap","Highcharts","window","proj4","App","props","getCsvData","bind","mapOptions","chart","map","height","title","text","mapNavigation","enabled","buttonOptions","verticalAlign","tooltip","useHTML","formatter","this","point","name","plotOptions","series","dataLabels","marker","radius","mapData","mapCnData","borderColor","nullColor","showInLegend","type","data","enabledThreshold","fillColor","lineColor","lineWidth","symbol","width","file","require","Papa","parse","download","skipEmptyLines","complete","result","mapItems","forEach","item","oneItem","lat","parseFloat","lon","color","push","charts","update","constructorType","highcharts","options","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,iC,sNCQ3CC,IAAcC,KAEQ,qBAAXC,SACTA,OAAOC,MAAQD,OAAOC,OAASA,K,IAkHlBC,E,YA9Gb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,WAAa,EAAKA,WAAWC,KAAhB,gBAElB,EAAKC,WAAa,CAChBC,MAAO,CACLC,IAAK,sBACLC,OAAQ,KAEVC,MAAO,CACLC,KAAM,0DAERC,cAAe,CACbC,SAAS,EACTC,cAAe,CACbC,cAAe,WAGnBC,QAAS,CACPC,SAAS,EACTC,UAAW,WACT,OAAOC,KAAKC,MAAMC,OAGtBC,YAAa,CACXC,OAAQ,CACNC,WAAY,CACVX,SAAS,GAEXY,OAAQ,CACNC,OAAQ,KAIdH,OAAQ,CACN,CACEF,KAAM,YACNM,QAASC,EACTC,YAAa,UACbC,UAAW,2BACXC,cAAc,GAEhB,CACEC,KAAM,WACNX,KAAM,yLACNY,KAAM,GACNR,OAAQ,CACNZ,SAAS,EACTqB,iBAAkB,EAClBC,UAAW,UACX1B,OAAQ,GACR2B,UAAW,UACXC,UAAW,EACXX,OAAQ,EACRY,OAAQ,6DACRC,MAAO,OAvDG,E,iFA+DlB,IAAMC,EAAOC,EAAQ,IAErBC,IAAKC,MAAMH,EAAM,CAEfI,UAAU,EACVC,gBAAgB,EAChBC,SAAU3B,KAAKf,e,iCAIP2C,GACV,IAAMC,EAAW,GAUjBD,EAAOd,KAAKgB,SAAQ,SAAUC,GAC5B,IAAMC,EAAU,CACdC,IAAKC,WAAWH,EAAK,IACrBI,IAAKD,WAAWH,EAAK,IACrBK,MAAOL,EAAK,GACZ7B,KAAM6B,EAAK,IAEbF,EAASQ,KAAKL,MAGhBpD,IAAW0D,OAAO,GAAGlC,OAAO,GAAGmC,OAAO,CACpCzB,KAAMe,IACL,K,+BAIH,OACE,kBAAC,IAAD,CACEW,gBAAiB,WACjBC,WAAY7D,IACZ8D,QAAS1C,KAAKb,iB,GAzGJwD,aCFEC,QACW,cAA7B/D,OAAOgE,SAASC,UAEe,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d69faca9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.5dce9009.csv\";","import React, { Component } from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport highchartsMap from 'highcharts/modules/map'\nimport proj4 from 'proj4'\nimport mapCnData from '@highcharts/map-collection/countries/cn/cn-all.geo.json'\nimport Papa from 'papaparse'\nimport './App.css'\nhighchartsMap(Highcharts)\n\nif (typeof window !== 'undefined') {\n  window.proj4 = window.proj4 || proj4\n}\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.getCsvData = this.getCsvData.bind(this)\n\n    this.mapOptions = {\n      chart: {\n        map: 'countries/cn/cn-all',\n        height: 800\n      },\n      title: {\n        text: '金庸武侠门派分布图'\n      },\n      mapNavigation: {\n        enabled: true,\n        buttonOptions: {\n          verticalAlign: 'bottom'\n        }\n      },\n      tooltip: {\n        useHTML: true,\n        formatter: function () {\n          return this.point.name\n        }\n      },\n      plotOptions: {\n        series: {\n          dataLabels: {\n            enabled: true\n          },\n          marker: {\n            radius: 3\n          }\n        }\n      },\n      series: [\n        {\n          name: 'menpaiMap',\n          mapData: mapCnData,\n          borderColor: '#cccccc',\n          nullColor: 'rgba(200, 200, 200, 0.3)',\n          showInLegend: false\n        },\n        {\n          type: 'mappoint',\n          name: '如果您对位置精确度有疑欢迎提交issue，欢迎提PR创建新门派 https://github.com/menpai/ditu',\n          data: [],\n          marker: {\n            enabled: true,\n            enabledThreshold: 2,\n            fillColor: '#009933',\n            height: 18,\n            lineColor: '#ffffff',\n            lineWidth: 1,\n            radius: 4,\n            symbol: 'url(https://image.flaticon.com/icons/svg/1553/1553150.svg)',\n            width: 18\n          }\n        }\n      ]\n    }\n  }\n\n  componentDidMount () {\n    const file = require('./map.csv')\n\n    Papa.parse(file, {\n      // header: true,\n      download: true,\n      skipEmptyLines: true,\n      complete: this.getCsvData\n    })\n  }\n\n  getCsvData (result) {\n    const mapItems = []\n    /*\n    const mapItems = [{\n      lat: 44.880296,\n      lon: 84.810185,\n      color: 'green',\n      name: '红花会'\n    }];\n    */\n\n    result.data.forEach(function (item) {\n      const oneItem = {\n        lat: parseFloat(item[0]),\n        lon: parseFloat(item[1]),\n        color: item[2],\n        name: item[3]\n      }\n      mapItems.push(oneItem)\n    })\n\n    Highcharts.charts[0].series[1].update({\n      data: mapItems\n    }, true)\n  }\n\n  render () {\n    return (\n      <HighchartsReact\n        constructorType={'mapChart'}\n        highcharts={Highcharts}\n        options={this.mapOptions}\n      />\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}